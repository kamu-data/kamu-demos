---
kind: DatasetSnapshot
version: 1
content:
  name: matches
  kind: root
  metadata:
    - kind: setPollingSource
      fetch:
        kind: filesGlob
        path: replays-staged/*.replay
        cache:
          kind: forever
      prepare:
        - kind: pipe
          command:
            - "rrrocket/rrrocket"
            - "-n"
        - kind: pipe
          command:
            - "jq"
            - ". | tostring"
      read:
        kind: csv
        header: false
        quote: '"'
        escape: '\'
        schema:
          - "replay_json STRING"
      preprocess:
        kind: sql
        engine: spark
        query: |
          with

          header_json as (
              select
                  replay_json,
                  get_json_object(
                      replay_json,
                      '$.properties'
                  ) as header_json
              from input
          ),

          header_raw as (
              select
                  replay_json,
                  from_json(header_json, '
                      struct<
                          Id:string,
                          Date:string,
                          MapName:string,
                          TeamSize:integer,
                          UnfairTeamSize:integer
                      >
                  ') as header
              from header_json
          )
                          
          select
              cast(unix_timestamp(header.Date, "yyyy-MM-dd HH-mm-ss") as timestamp) as event_time,
              header.Id as match_id,
              header.MapName as map_name,
              header.TeamSize as team_size,
              header.UnfairTeamSize as unfair_team_size,
              replay_json
          from header_raw
      merge:
        kind: ledger
        primaryKey:
          - match_id
